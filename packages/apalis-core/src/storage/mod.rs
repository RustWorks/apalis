/// The context of a job stored by a storage
pub mod context;
/// Errors generated by a [Storage]
pub mod error;
/// Storage works on jobs
pub mod job;
use std::time::{Duration, SystemTime};

use crate::{
    request::{Request, RequestStream},
    storage::job::{Job, JobId},
    worker::WorkerId,
};

pub use self::error::StorageError;

/// Represents a Storage Result
pub type StorageResult<I> = Result<I, StorageError>;

/// Represents a [Storage] that can persis
#[trait_variant::make(Storage: Send)]
pub trait LocalStorage {
    /// The type of job that can be persisted
    type Output: Job;

    /// Pushes a job to a storage
    async fn push(&mut self, job: Self::Output) -> StorageResult<JobId>;

    /// Push a job into the scheduled set
    async fn schedule(&mut self, job: Self::Output, on: i64) -> StorageResult<JobId>;

    /// Return the number of pending jobs from the queue
    async fn len(&self) -> StorageResult<i64>;

    /// Fetch a job given an id
    async fn fetch_by_id(&self, job_id: &JobId) -> StorageResult<Option<Request<Self::Output>>>;

    /// Get the stream of jobs
    fn consume(
        &mut self,
        worker_id: &WorkerId,
        interval: Duration,
        buffer_size: usize,
    ) -> RequestStream<Request<Self::Output>>;

    /// Update a job details
    async fn update(&self, job: &Request<Self::Output>) -> StorageResult<()>;

    /// Reschedule a job
    async fn reschedule(
        &mut self,
        job: &Request<Self::Output>,
        wait: Duration,
    ) -> StorageResult<()>;

    /// Returns true if there is no jobs in the storage
    async fn is_empty(&self) -> StorageResult<bool>;
}
